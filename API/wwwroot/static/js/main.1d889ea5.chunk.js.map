{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/activities/dashboard/ActivityFilters.tsx","app/layout/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","class","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","vertical","size","style","width","marginTop","Label","icon","basic","color","className","Item","active","has","onClick","Header","onChange","fixed","Container","as","NavLink","exact","to","header","Dropdown","text","Image","src","avatar","spaced","Link","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","Content","ActivityListItem","Segment","Group","attached","textAlign","marginBottom","Description","Icon","secondary","clearing","Button","floated","groupedActivities","group","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","handleGetNext","currentPage","useEffect","Grid","Column","pageStart","loadMore","hasMore","totalPages","initialLoad","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","positive","inverted","isLoggedIn","LoadingComponent","Dimmer","Loader","MyTextArea","MySelectInput","helpers","Select","clearable","options","e","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","sub","enableReinitialize","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","rows","border","classname","resetForm","labelPosition","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","length","relaxed","divided","position","ribbon","Extra","activityImageStyle","activityImageTextStyle","top","left","height","background","padding","zIndex","TestErrors","widths","baseUrl","primary","NotFound","Card","margin","message","Modal","onClose","setEditMode","bio","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","pointing","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","Reveal","animated","visible","hidden","preventDefault","handleFollow","maxHeight","borderRadius","extra","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","setfiles","revokeObjectURL","marginLeft","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","cursor","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.1d889ea5.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(800);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;\n","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }\n","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    bio?: string;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    } \n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                } \n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n}\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {   \n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    } \n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}\n","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n    \n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\";\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n    class:\"scrolling content\";\n}\n\nexport default class ModalStore{\n    modal: Modal = {\n        open: false,\n        body: null,\n        class: \"scrolling content\"\n    }\n\n    constructor(){\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n        this.modal.class = 'scrolling content';\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Label, Menu } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters(){\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return(\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 27}}>\n                <Label icon='filter' basic color='purple' content='Filters' className='activityFilters'/>\n                <Menu.Item content='All Events' active={predicate.has('all')} \n                    onClick={() => setPredicate('all', 'true')}/>\n                <Menu.Item content='I am Attendng' active={predicate.has('isGoing')} \n                    onClick={() => setPredicate('isGoing', 'true')}/>\n                <Menu.Item content='I am Hosting' active={predicate.has('isHost')} \n                    onClick={() => setPredicate('isHost', 'true')}/>\n            </Menu>\n            <Header />\n            <Calendar onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}/>\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport ActivityFilters from '../../features/activities/dashboard/ActivityFilters';\nimport modalStore from '../stores/modalStore';\nimport { useStore } from '../stores/store';\nimport { Navbar, Nav, NavItem, NavDropdown } from \"react-bootstrap\";\n\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    const {userStore, modalStore} = useStore();\n    return (\n        <Menu fixed='top'>\n            <Container>\n                <Menu.Item className='navbarLogo' as={NavLink} exact to='/' header>\n                    eventfriend\n                </Menu.Item>\n                <Menu.Item>\n                    <Dropdown text='Menu'>\n                        <Dropdown.Menu className='mainDropdown'>\n                            <Dropdown.Item as={NavLink} to='/activities' color='pink' content='Events' icon='heart'/>\n                            <Dropdown.Item as={NavLink} to='/createActivity' color='pink' content='Create' icon='edit outline'/>\n                            <Dropdown.Item content='Filters' onClick={() => modalStore.openModal(<ActivityFilters/>)} icon='filter'/>\n                            <Dropdown.Item>\n                                <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                                <Dropdown text={user?.displayName}>\n                                    <Dropdown.Menu className='profileDropdown'>\n                                        <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                                            text='My Profile' icon='user' />\n                                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { List, Image, Popup, Label } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport { Link } from 'react-router-dom';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props){\n    const styles = {\n        borderColor: '#ff68f7',\n        borderWidth: 2,\n        // boxShadow:  '5px 5px 6px 0 #ffaefb',\n    }\n    return(\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup hoverable key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image size='mini' circular src={attendee.image || '/assets/user.png'}\n                                bordered style={attendee.following ? styles : null}/>\n                        </List.Item>\n                    }>\n                    <Popup.Content>\n                        <p>{attendee.displayName}</p>\n                        {/* <ProfileCard profile={attendee}/> */}\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { format } from 'date-fns';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props){\n    \n    return(\n        <Segment.Group className='activityCard'>\n            <Segment >\n                {activity.isCancelled &&\n                    <Label attached='top' color='pink' content='Cancelled' style={{textAlign: 'center'}}/>\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image className='activityCardPic' style={{marginBottom: 3}} size='small' circular src={`/assets/categoryImages/${activity.category}.png`}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\n                            <Item.Description className='activityHost'>Hosted By <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label className='hostLabel' basic color='pink'>You Are The Host</Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label className='attendLabel' basic color='violet'>You Are Attending</Label>\n                                </Item.Description>\n                            )}\n                            \n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment >\n                <span>\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}{' '}{' '}\n                    <Icon name='marker'/> {activity.venue}{' '}{' '}\n                    <Icon name='tag'/> {activity.category}{' '}{' '}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button className='viewButton' as={Link} to={`activities/${activity.id}`} color='violet' floated='right' content='View'/> \n            </Segment>\n        </Segment.Group>\n    )\n}","import React, { Fragment } from 'react';\nimport { Header, Label } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return(\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Label className='activityListDate' basic color='purple'>{group}</Label>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity}/>\n                    ))}\n                </Fragment>\n            ))}\n        </>\n        \n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='purple' floated='right' content='view' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Loader} from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityList from './ActivityList';\nimport { observer } from 'mobx-react-lite';\nimport ActivityFilters from './ActivityFilters';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\n\nexport default observer(function ActivityDashboard(){\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const[loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext(){\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return (\n        <Grid>\n            <Grid.Column width='16'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder/>\n                        <ActivityListItemPlaceholder/>\n                    </>\n                ) : (\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext} \n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}>\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )}\n                <InfiniteScroll pageStart={0} loadMore={handleGetNext} \n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                    initialLoad={false}>\n                    <ActivityList/>\n                </InfiniteScroll>\n            </Grid.Column>\n            {/* <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column> */}\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props){\n    const [field, meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label className='errorLabel' basic color='pink'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\n\n\nexport default observer(function LoginForm(){\n    const {userStore} = useStore();\n    return(\n        <Formik initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: 'Invalid email or password.'}))}>\n\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header className='formHeader' as='h2' content='eventfriend' textAlign='center'/>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage name='error' render={() => <Label style={{marginBottom: 10}} basic color='pink' content={errors.error}/>}/>\n                    <Button className='loginForm' loading={isSubmitting} content='Login' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\n\nexport default observer(function RegisterForm(){\n    const {userStore} = useStore();\n    return(\n        <Formik initialValues={{displayName:'', username:'', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}>\n\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header className='formHeader' as='h2' content='eventfriend' textAlign='center'/>\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\n                    <MyTextInput name='username' placeholder='Username'/>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage name='error' render={() => <ValidationErrors errors={errors.error}/>}/>\n                    <Button className='registerForm' disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n})\n\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage(){\n    \n    const {userStore, modalStore} = useStore();\n    return(\n           <Segment inverted textAlign='center' vertical className='masthead'>\n                <Container text>\n                    <Image className='robot' src={`/assets/homepage.png`} />\n                    <h1>eventfriend</h1>\n                    {userStore.isLoggedIn ? (\n                        <>\n                            <Button className='login'as={Link} to='/activities' size='huge'>\n                                events\n                            </Button>\n                        </>\n                    ) : (\n                            <>\n                                <Button className='login' onClick={() => modalStore.openModal(<LoginForm/>)} size='huge'>\n                                    Login\n                                </Button>\n                                \n                                <Button className='register' onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge'>\n                                    Register\n                                </Button>\n                            </>\n                        )}\n                </Container>\n           </Segment>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content: string;\n}\n\nexport default function LoadingComponent({inverted = true, content='Loading...'}: Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props){\n    const [field, meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label className='errorLabel' basic color='pink'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props){\n    const [field, meta, helpers] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label className='errorLabel' basic color='pink'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n}\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\n    const [field, meta, helpers] = useField(props.name!);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label className='errorLabel' basic color='pink'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing className='activityForm'>\n            <Header content='Event Details' sub color='black' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyDateInput \n                            placeholderText='Date'  \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category'/>\n                        <Header content='Location Details' sub color='black' />\n                        <MyTextInput placeholder='City'  name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button className='formSubmit'\n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button className='viewButton' as={Link} to='/activities' color='violet' floated='right' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n    )\n})\n","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader, Label, Button } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\nimport MyTextArea from '../../../app/common/form/MyTextArea'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='purple'\n                style={{ border: 'none' }}\n            >\n                <Label classname='chatLabel' basic color='purple'>Event Chat</Label>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        // <Form className='ui form'>\n                        //     <Field name='body'>\n                        //         {(props: FieldProps) => (\n                        //             <div style={{ position: 'relative' }}>\n                        //                 <Loader active={isSubmitting} />\n                        //                 <textarea\n                        //                     placeholder='Say Something! (Enter to submit)'\n                        //                     rows={2}\n                        //                     {...props.field}\n                        //                     onKeyPress={e => {\n                        //                         if (e.key === 'Enter' && e.shiftKey) {\n                        //                             return;\n                        //                         }\n                        //                         if (e.key === 'Enter' && !e.shiftKey) {\n                        //                             e.preventDefault();\n                        //                             isValid && handleSubmit();\n                        //                         }\n                        //                     }}\n                        //                 />\n                        //             </div>\n                        //         )}\n                        //     </Field>\n                        // </Form>\n                        <Form>\n                            <MyTextArea placeholder='Say Something...' name='body' rows={2}/>\n                            <Button loading={isSubmitting} disabled={isSubmitting || !isValid} content='Add'\n                                labelPosition='left' icon='edit' color='purple' type='submit' floated='right'/>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n            <Segment className='bottomSegment' attached='bottom'></Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment className='activityCardInfo' attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='black' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={14}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment className='activityCardInfo' attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='black' />\n                    </Grid.Column>\n                    <Grid.Column width={14}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment className='activityCardInfo' attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='black' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props{\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment className='peopleAttending'\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='purple'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Attending\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='pink'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' circular src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3' className='attendeeListName'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: '#ff68f7' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n\n                </List>\n            </Segment>\n            <Segment className='bottomSegment' attached='bottom'></Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\n\nconst activityImageStyle = {\n    filter: 'brightness(100%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    top: '0%',\n    left: '0%',\n    width: '50%',\n    height: 'auto',\n    color: 'black',\n    background: 'white',\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n    const {userStore, modalStore} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled &&\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \n                        ribbon color='pink' content='Cancelled' className='canceledEventFlag'/>\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.png`} fluid style={activityImageStyle}/>\n                <Segment className='activityNameBG' style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header className='activityName'\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'black'}}\n                                />\n                                <p className='activityDetials'>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p className='activityDetials'>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`} className='activityHost'>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'blue' : 'pink'} basic floated='left' className='cancelEventButton' \n                            content={activity.isCancelled ? 'Re-activate' : 'Cancel'} onClick={cancelActivityToggle} loading={loading}/>\n                        <Button as={Link} disabled={activity.isCancelled} to={`/manage/${activity.id}`} color='violet' floated='right'>Manage</Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button className='joinEventButton' loading={loading} color='pink' onClick={updateAttendance}>Cancel</Button>\n                ) : (\n                    <Button className='joinventButton' loading={loading} disabled={activity.isCancelled} onClick={updateAttendance} color='purple'>Join</Button>\n                )}\n                <Button className='viewAttendees' loading={loading} color='blue' onClick={() => modalStore.openModal(<ActivityDetailedSidebar activity={activity}/>)}>Guests</Button>\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent content='Loading'/>;\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n        </Grid>\n    )\n})\n","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Card, Header, Image, Segment } from 'semantic-ui-react';\n\nexport default function NotFound(){\n    return(\n        // <Segment placeholder className='lost'>\n        //     <Image className='notFound' src={`/assets/abstract-page-not-found.png`} />\n        //     <Header icon>\n        //         Lost Page\n        //     </Header>\n        //     <Segment.Inline>\n        //         <Button className='login' as={Link} to='/activities' primary>Events</Button>\n        //     </Segment.Inline>\n        // </Segment>\n            <Card className='lost' style={{margin: 'auto'}}>\n                <Image className='lostPic' fluid\n                        src={`/assets/abstract-page-not-found.png`}/>\n                <Card.Content>\n                    <Header className='lostText' icon style={{marginTop: '2em'}}>\n                        Page Not Found\n                    </Header>\n                </Card.Content>\n                <Segment basic textAlign={'center'} style={{marginTop: '-1em'}}>\n                    <Button className='lostButton' as={Link} to='/activities' primary>Events</Button>\n                </Segment>\n            </Card>\n       \n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='pink' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n                \n            }\n        </Container>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})\n","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button className='submitProfileEdit'\n                        color='pink'\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})\n","import React, {useState} from 'react';\nimport {useStore} from \"../../app/stores/store\";\nimport {Button, Grid, Header, Label, Tab} from \"semantic-ui-react\";\nimport { observer } from 'mobx-react-lite';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane className='profileHeader'>\n            <Grid>\n                <Grid.Column width='16'>\n                   <Label className='profileLabels' basic color='purple'>{`About ${profile?.displayName}`}</Label>\n                    {isCurrentUser && (\n                        <Button color='purple' className='AddPhoto'\n                            floated='right'\n                            content={editMode ? 'Cancel' : 'Edit'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps, Label } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Label className='profileLabels' basic color='purple'>Events</Label>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={undefined}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card className='profileActivityCards'\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.png`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content className='profilePhotos'>\n                                    <Card.Header className='profileActivityHeader' textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});\n","import React, { SyntheticEvent } from 'react';\nimport { Profile } from '../../app/models/profile';\nimport { observer } from 'mobx-react-lite';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string){\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return(\n        <Reveal animated='move' className='bigFollowButton'>\n            <Reveal.Content className='bigFollowButton' visible style={{width: '100%'}}>\n                <Button fluid color='purple' className='followButton' content={profile.following ? 'Following' : 'Not Following'}/>\n            </Reveal.Content>\n            <Reveal.Content className='bigFollowButton' hidden style={{width: '100%'}}>\n                <Button fluid basic className='followButton'\n                    color={profile.following ? 'pink' : 'purple'} \n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading} onClick={(e) => handleFollow(e, profile.username)}/>\n            </Reveal.Content>\n        </Reveal>\n    )\n}) ","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card className='attendeeCard' as={Link} to={`/profiles/${profile.username}`}>\n            <Image style={{maxHeight: '5em', margin: 'auto', textAlign: 'center', borderRadius: '50%'}} \n                    src={profile.image || '/assets/user.png'} className='profileCardPhoto'/>\n            <Card.Content>\n                <Card.Header style={{textAlign: 'center'}}>{profile.displayName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />Followers: {profile.followersCount}\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n})","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../app/stores/store';\nimport { Button, Card, Grid, Header, Label, Tab } from 'semantic-ui-react';\nimport ProfileCard from './ProfileCard';\nimport { Link } from 'react-router-dom';\n\nexport default observer(function ProfileFollowings(){\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n    \n    return(\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Label className='profileLabels' basic color='purple' content={activeTab === 3 ? \n                        `Followers: ${profile?.followersCount}` : `Following: ${profile?.followingCount}`}/>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={undefined}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile}/>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport {Cropper} from 'react-cropper';\nimport 'cropperjs/dist/cropper.css'\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\n    return(\n        <Cropper \n            src={imagePreview} \n            style={{height: 200, width: '200'}} \n            initialAspectRatio={1} \n            aspectRatio={1} \n            preview='.img-preview' \n            guides={false} \n            viewMode={1} \n            autoCropArea={1} \n            background={false} \n            onInitialized={cropper => setCropper(cropper)}/>\n    )\n}","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n\n    const dzStyles = {\n        border: 'none',\n        borderColor: '#a1cae2',\n        borderRadius: '20px',\n        paddingTop: '50px',\n        textAlign: 'center' as 'center',\n        height: 150,\n        width: 150\n    }\n\n    const dzActive = {\n        borderColor: 'pink'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='cloud upload' size='huge' />\n            \n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Card, Grid, GridColumn, Header, Item } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props){\n    const [files, setfiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop(){\n        if (cropper){\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return(\n        // <Grid>\n        //     <Grid.Column width={undefined}>\n        //         <Header className='picUploadHeading' sub color='black' />\n        //         <PhotoWidgetDropzone setFiles={setfiles}/>\n        //     </Grid.Column>\n        //     <Grid.Column width={undefined}>\n        //         <Header className='picUploadHeading' sub color='black'/>\n        //         {files && files.length > 0 && (\n        //             <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n        //         )}\n        //     </Grid.Column>\n        //     <Grid.Column width={undefined}>\n        //         <Header className='picUploadHeading' sub color='black'/>\n        //         {files && files.length > 0 && \n        //             <>\n        //                 <div className='img-preview' style={{minHeight: 200, overflow: 'hidden', borderRadius: '20px', textAlign: 'center'}}/>\n        //                 <Button.Group className='photoButtons' widths={2}>\n        //                     <Button className='checkPic' loading={loading} onClick={onCrop} color='blue' size='mini' icon='check' style={{marginTop: 12}}/>\n        //                     <Button className='cancelPic' disabled={loading} onClick={() => setfiles([])} size='mini' icon='close' style={{marginTop: 12}}/>\n        //                 </Button.Group>\n        //             </>}\n        //     </Grid.Column>\n        // </Grid>\n        <Grid>\n            <Grid.Column width={16}>\n                <Card.Group itemsPerRow={undefined}>\n                    <Card className='photoWidget' >\n                        <div style={{marginLeft: '20px', marginTop: '20px'}}>\n                            <PhotoWidgetDropzone setFiles={setfiles}/>\n                        </div>\n                    </Card>\n                    <Card className='photoWidget'>\n                        {files && files.length > 0 && (\n                            <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n                        )}\n                    </Card>\n                    <Card className='photoWidget'>\n                        {files && files.length > 0 && \n                            <>\n                                <div className='img-preview' style={{minHeight: 150, overflow: 'hidden', borderRadius: '20px', marginLeft: '20px'}}/>\n                                <Button.Group className='photoButtons' widths={2} style={{marginLeft: '30px'}}>\n                                    <Button className='checkPic' loading={loading} onClick={onCrop} color='blue' size='mini' icon='check' style={{marginTop: 12}}/>\n                                    <Button className='cancelPic' disabled={loading} onClick={() => setfiles([])} size='mini' icon='close' style={{marginTop: 12}}/>\n                                </Button.Group>\n                            </>}\n                    </Card>\n                </Card.Group>\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Label, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Label className='profileLabels' basic color='purple'>Photos</Label>\n                    {isCurrentUser && (\n                        <Button floated='right' color='purple' className='AddPhoto'\n                            content={addPhotoMode ? 'Cancel' : 'Add'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                            <Card.Group itemsPerRow={undefined}>\n                                {profile.photos?.map(photo => (\n                                    <Card className='picUploads' key={photo.id}>\n                                        <Image className='profilePhotos' src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group className='profilePhotos' fluid widths={2}>\n                                                <Button className='editPic'\n                                                    basic\n                                                    color='black'\n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading={target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button className='deletePic'\n                                                    basic \n                                                    color='pink' \n                                                    icon='trash' \n                                                    loading={target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { Icon, Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: <Icon name='info' size='large' color='black' className='profileTabs' \n            style={{cursor: 'pointer'}}/>, render: () => <ProfileAbout />},\n        {menuItem: <Icon name='camera' size='large' color='black' className='profileTabs' \n            style={{cursor: 'pointer'}}/>, render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: <Icon name='calendar' size='large' color='black' className='profileTabs' \n            style={{cursor: 'pointer'}}/>, render: () => <ProfileActivities/>},\n        {menuItem: <Icon name='users' size='large' color='black' className='profileTabs' \n            style={{cursor: 'pointer'}}/>, render: () => <ProfileFollowings/>},\n        {menuItem: <Icon name='user' size='large' color='black' className='profileTabs' \n            style={{cursor: 'pointer'}}/>, render: () => <ProfileFollowings/>},\n    ];\n\n    return (\n        <Tab className='profileMenu'\n            menu={{fluid: true, vertical: false}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})\n","import React from 'react';\nimport { Grid, Header, Item, Segment, Statistic, Divider, Button, Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { observer } from 'mobx-react-lite';\nimport FollowButton from './FollowButton';\nimport { useStore } from '../../app/stores/store';\nimport modalStore from '../../app/stores/modalStore';\nimport ActivityFilters from '../activities/dashboard/ActivityFilters';\nimport ProfileFollowings from './ProfileFollowings';\nimport profileStore from '../../app/stores/profileStore';\n\n\ninterface Props{\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props){\n    const {userStore, modalStore} = useStore();\n    const {profileStore} = useStore();\n    const { followings, loadingFollowings} = profileStore;\n    return(\n        <Segment className='profileHeader'>\n            <Item.Group>\n                <Item>\n                    <Item.Image className='profilePhoto' avatar size='small' src={profile.image || '/assets/user.png'}/>\n                    <Item.Content verticalAlign='middle'>\n                        <Header as='h1' content={profile.displayName}/>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n            <Item.Group className='bigFollowButton' style={{width: '40%'}}>\n                <FollowButton profile={profile}/>\n            </Item.Group>\n        </Segment>\n        \n    )\n})","import React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from '../../app/stores/store';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\n\nexport default observer(function ProfilePage(){\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const{loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile (username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading Profile ...'/>\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile}/>\n                        <ProfileContent profile={profile}/>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from \"react\";\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route {...rest} render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/'/>}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}